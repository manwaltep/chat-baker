diff --git a/src/embeddings/index.ts b/src/embeddings/index.ts
index 0c3ff3c1fae97a6541889324821b0d1b15fbdb33..34ef15c9dfc24ab45b5b7b29209ed8c56b724604 100644
--- a/src/embeddings/index.ts
+++ b/src/embeddings/index.ts
@@ -49,7 +49,7 @@ export class Embeddings {
     key: string,
     provider: EmbeddingsModelProvider,
     documents: Document[],
-    options?: EmbeddingsOptions
+    options?: EmbeddingsOptions,
   ) {
     this.key = key;
     this.provider = provider;
@@ -76,13 +76,13 @@ export class Embeddings {
 
     if (index.key !== this.key) {
       throw new Error(
-        `The index key ${index.key} does not match the key ${this.key}.`
+        `The index key ${index.key} does not match the key ${this.key}.`,
       );
     }
 
     if (index.documents.length !== this.documents.length) {
       throw new Error(
-        `The number of documents in the index ${index.documents.length} does not match the number of documents ${this.documents.length}.`
+        `The number of documents in the index ${index.documents.length} does not match the number of documents ${this.documents.length}.`,
       );
     }
 
@@ -96,7 +96,7 @@ export class Embeddings {
     if (embeddings) {
       if (embeddings.length !== this.documents.length) {
         throw new Error(
-          "The number of embeddings must match the number of documents."
+          "The number of embeddings must match the number of documents.",
         );
       }
 
@@ -113,8 +113,8 @@ export class Embeddings {
     if (this.isCached()) {
       console.log(
         chalk.yellow(
-          `Index for ${this.key} already exists. Loading from cache...`
-        )
+          `Index for ${this.key} already exists. Loading from cache...`,
+        ),
       );
       this.load();
       return;
@@ -123,16 +123,18 @@ export class Embeddings {
     console.log(chalk.white(`Creating Embeddings: ${this.documents.length}`));
 
     // create the embeddings
+    const embeddingPromises = [];
     for (let i = 0; i < this.documents.length; i++) {
-      const embedding =
+      const embeddingPromise =
         // use the provided embeddings if they exist
         this.embeddings?.[i] ||
         // otherwise, create the embedding
-        (await this.provider.embed(this.documents[i].content));
+        this.provider.embed(this.documents[i].content);
 
-      this.embeddings.push(embedding);
+      embeddingPromises.push(embeddingPromise);
     }
 
+    this.embeddings = await Promise.all(embeddingPromises);
     this.save();
   }
 
@@ -205,7 +207,7 @@ export class Embeddings {
         key: this.key,
         embeddings: this.embeddings,
         documents: this.documents,
-      })
+      }),
     );
   }
 }
@@ -220,6 +222,6 @@ interface Extractor {
   extract<T extends string>(
     query: string,
     prompt: Prompt<T>,
-    variables: T[]
+    variables: T[],
   ): string[];
 }
